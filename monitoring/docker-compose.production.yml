version: '3.8'

# Production Centralized Monitoring Stack
# Access: https://yourdomain.com/health
# Scalable for multiple projects

services:
  # Nginx Reverse Proxy - Routes /health to Grafana
  nginx-monitoring:
    image: nginx:alpine
    container_name: monitoring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - grafana-storage:/var/lib/grafana:ro
    depends_on:
      - grafana
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana - Main Dashboard Interface at /health
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Admin
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/health/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,yesoreyeram-boomtable-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/plugins:/var/lib/grafana/plugins
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring
    restart: unless-stopped

  # Prometheus - Metrics Collection & Storage
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-storage:/prometheus
    networks:
      - monitoring
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: monitoring-loki
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki:/etc/loki
      - loki-storage:/loki
    networks:
      - monitoring
    restart: unless-stopped

  # Promtail - Log Collection Agent
  promtail:
    image: grafana/promtail:latest
    container_name: monitoring-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # Project-specific log mounts (add more as needed)
      - /var/log/social-api:/logs/social-api:ro
      - /var/log/nginx:/logs/nginx:ro
    depends_on:
      - loki
    networks:
      - monitoring
    restart: unless-stopped

  # Redis Exporter - Redis Monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: monitoring-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    restart: unless-stopped

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    pid: host
    networks:
      - monitoring
    restart: unless-stopped

  # Service Control API - Handles service restart requests
  service-controller:
    build: 
      context: ./service-controller
      dockerfile: Dockerfile
    container_name: monitoring-service-controller
    environment:
      - SUPERVISOR_HOST=host.docker.internal
      - PROJECTS_CONFIG=/app/projects.yml
    volumes:
      - ./service-controller/projects.yml:/app/projects.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped

# Persistent Storage
volumes:
  prometheus-storage:
  loki-storage:
  grafana-storage:

# Network
networks:
  monitoring:
    driver: bridge